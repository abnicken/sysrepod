1) To build, use 'make'.
2) To clean, use 'make clean'.
3) To run server listening on 3500 port:
      cd server
      ./sysrepod param

   In another XTERM window start sample client that talks SRD (Sys Repo Daemon) protocol:
     cd client_SRD
     # To run client that issues a few commands and exits.
     ./clientsrd 
     # This client in the end will wait for a command from SysrepoD server requesting
     # information about the Operational Data Store that this client is maintaining.
     # There is a need of a North-bound client that initiates a request for Operational Data Store by
     # send it to SysrepoD server. The server in turn forwards that request to this client "./clientsrd.
     # To test this feature, it is time to start a sample North-Bound Client. To do that follow the following steps:
     # Start a new XTERM window and be in the code directory.
     cd client_SRD
     ./opDStoreClient
     # It will start this North-Side Management Client. You will see messages going to server and to 'clientsrd'
     # started earlier.         

4) One can run many clients in parallel from separate XTERM windows.
5) ClientSRD.cpp implements a client class that talks SRD protocol. One can create additional classes
   for different protocols by deriving from the base class Client implemented in Client.cpp.
6) mainSRDClient.cpp implements a sample client that talks SRD.
7) mainSysRedoD.cpp implements the SysRepo Daemon. 
8) DataStore.cpp implements the Data Store class. One can have many Data Stores.
9) libsrd.a is the library that any client talking SRD protocol will link with.
   To understand the API Calls available in libsrd.a, look at the file srd.h.
10) HOW TO WRITE A CLIENT: Look at the sample client mainSRDClient.cpp. The 
    API calls are listed in srd.h. To compile your client use the following
    in Makefile:

      client: mainSRDClient.o srd.o libsrd.a
	$(GCC) -g -o client mainSRDClient.o libsrd.a -lxml2
	
	A DESCRPTION OF THE API's IS GIVEN IN 'srd.h'
	
11) AN EXAMPLE of running TWO Daemons (south-side clients) with two separate Operational Data Stores specified
    using Name Spaces and ONE North-side Management Client sending XPath expression for the two Operational
    Data Stores. Execute the following commands:
    
    a) Open an XTerm window in the code directory and execute:
       cd server
       ./sysrepod param
    b) Open another XTerm window in the code directory and execute:
       cd client_SRD
       ./opDStoreSubTree1
    c) Open another XTerm window in the code directory and execute:
       cd client_SRD
       ./opDStoreSubTree2
       
       b) and c) starr two Daemons that register two Operational Data Stores
       Now let us start a north-side client to send XPATH to these two Daemons
    d) Open another XTerm window in the code directory and execute:
       cd client_SRD
       ./opDStoreGetSubTree
       
       You will see the results of XPath in this XTerm window.
       

